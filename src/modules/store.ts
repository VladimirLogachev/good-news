import { applyMiddleware, createStore } from 'redux';
import { createTransform, persistCombineReducers, PersistedState, persistStore } from 'redux-persist';
import persistStorage from 'redux-persist/es/storage';
import createSagaMiddleware from 'redux-saga';
import { env } from '../environments/production';
import { cleanupOnLoad, cleanupOnSave } from './feed/reducer';
import { reducers } from './reducers';
import { sagas } from './sagas';

export const configureStore = () => {
  const APP_VER = 1; // version could be generated by webpack leading to cleanup after each rebuild

  const migration = (state: PersistedState, ver: number) => Promise.resolve(APP_VER !== ver ? {} : state);

  const CleanupDatasets = createTransform(
    (inboundState: any, key: string) => (key === 'feed' ? cleanupOnSave(inboundState) : inboundState),
    (outboundState: any, key: string) => (key === 'feed' ? cleanupOnLoad(outboundState) : outboundState)
  );

  const persistConfig = {
    key: `${env.storagePrefix}.root`,
    storage: persistStorage,
    version: APP_VER,
    migrate: migration,
    transforms: [CleanupDatasets]
  };

  const combinedReducers = persistCombineReducers(persistConfig, reducers);

  const sagaMiddleware = createSagaMiddleware();
  const enhancer = applyMiddleware(sagaMiddleware);
  const store = createStore(combinedReducers, enhancer);
  sagaMiddleware.run(sagas);
  const persistor = persistStore(store);
  return { store, persistor };
};
